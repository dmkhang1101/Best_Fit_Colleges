{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  RedirectType: null,\n  getRedirectError: null,\n  redirect: null,\n  permanentRedirect: null,\n  isRedirectError: null,\n  getURLFromRedirectError: null,\n  getRedirectTypeFromError: null,\n  getRedirectStatusCodeFromError: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  RedirectType: function () {\n    return RedirectType;\n  },\n  getRedirectError: function () {\n    return getRedirectError;\n  },\n  redirect: function () {\n    return redirect;\n  },\n  permanentRedirect: function () {\n    return permanentRedirect;\n  },\n  isRedirectError: function () {\n    return isRedirectError;\n  },\n  getURLFromRedirectError: function () {\n    return getURLFromRedirectError;\n  },\n  getRedirectTypeFromError: function () {\n    return getRedirectTypeFromError;\n  },\n  getRedirectStatusCodeFromError: function () {\n    return getRedirectStatusCodeFromError;\n  }\n});\nconst _requestasyncstorageexternal = require(\"./request-async-storage.external\");\nconst _actionasyncstorageexternal = require(\"./action-async-storage.external\");\nconst _redirectstatuscode = require(\"./redirect-status-code\");\nconst REDIRECT_ERROR_CODE = \"NEXT_REDIRECT\";\nvar RedirectType;\n(function (RedirectType) {\n  RedirectType[\"push\"] = \"push\";\n  RedirectType[\"replace\"] = \"replace\";\n})(RedirectType || (RedirectType = {}));\nfunction getRedirectError(url, type, statusCode) {\n  if (statusCode === void 0) statusCode = _redirectstatuscode.RedirectStatusCode.TemporaryRedirect;\n  const error = new Error(REDIRECT_ERROR_CODE);\n  error.digest = REDIRECT_ERROR_CODE + \";\" + type + \";\" + url + \";\" + statusCode + \";\";\n  const requestStore = _requestasyncstorageexternal.requestAsyncStorage.getStore();\n  if (requestStore) {\n    error.mutableCookies = requestStore.mutableCookies;\n  }\n  return error;\n}\nfunction redirect(url, type) {\n  if (type === void 0) type = \"replace\";\n  const actionStore = _actionasyncstorageexternal.actionAsyncStorage.getStore();\n  throw getRedirectError(url, type,\n  // If we're in an action, we want to use a 303 redirect\n  // as we don't want the POST request to follow the redirect,\n  // as it could result in erroneous re-submissions.\n  (actionStore == null ? void 0 : actionStore.isAction) ? _redirectstatuscode.RedirectStatusCode.SeeOther : _redirectstatuscode.RedirectStatusCode.TemporaryRedirect);\n}\nfunction permanentRedirect(url, type) {\n  if (type === void 0) type = \"replace\";\n  const actionStore = _actionasyncstorageexternal.actionAsyncStorage.getStore();\n  throw getRedirectError(url, type,\n  // If we're in an action, we want to use a 303 redirect\n  // as we don't want the POST request to follow the redirect,\n  // as it could result in erroneous re-submissions.\n  (actionStore == null ? void 0 : actionStore.isAction) ? _redirectstatuscode.RedirectStatusCode.SeeOther : _redirectstatuscode.RedirectStatusCode.PermanentRedirect);\n}\nfunction isRedirectError(error) {\n  if (typeof error !== \"object\" || error === null || !(\"digest\" in error) || typeof error.digest !== \"string\") {\n    return false;\n  }\n  const [errorCode, type, destination, status] = error.digest.split(\";\", 4);\n  const statusCode = Number(status);\n  return errorCode === REDIRECT_ERROR_CODE && (type === \"replace\" || type === \"push\") && typeof destination === \"string\" && !isNaN(statusCode) && statusCode in _redirectstatuscode.RedirectStatusCode;\n}\nfunction getURLFromRedirectError(error) {\n  if (!isRedirectError(error)) return null;\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(\";\", 3)[2];\n}\nfunction getRedirectTypeFromError(error) {\n  if (!isRedirectError(error)) {\n    throw new Error(\"Not a redirect error\");\n  }\n  return error.digest.split(\";\", 2)[1];\n}\nfunction getRedirectStatusCodeFromError(error) {\n  if (!isRedirectError(error)) {\n    throw new Error(\"Not a redirect error\");\n  }\n  return Number(error.digest.split(\";\", 4)[3]);\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=redirect.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}