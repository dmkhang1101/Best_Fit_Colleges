{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  ReadonlyURLSearchParams: null,\n  RedirectType: null,\n  ServerInsertedHTMLContext: null,\n  notFound: null,\n  permanentRedirect: null,\n  redirect: null,\n  useParams: null,\n  usePathname: null,\n  useRouter: null,\n  useSearchParams: null,\n  useSelectedLayoutSegment: null,\n  useSelectedLayoutSegments: null,\n  useServerInsertedHTML: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  ReadonlyURLSearchParams: function () {\n    return _navigationreactserver.ReadonlyURLSearchParams;\n  },\n  RedirectType: function () {\n    return _navigationreactserver.RedirectType;\n  },\n  ServerInsertedHTMLContext: function () {\n    return _serverinsertedhtmlsharedruntime.ServerInsertedHTMLContext;\n  },\n  notFound: function () {\n    return _navigationreactserver.notFound;\n  },\n  permanentRedirect: function () {\n    return _navigationreactserver.permanentRedirect;\n  },\n  redirect: function () {\n    return _navigationreactserver.redirect;\n  },\n  useParams: function () {\n    return useParams;\n  },\n  usePathname: function () {\n    return usePathname;\n  },\n  useRouter: function () {\n    return useRouter;\n  },\n  useSearchParams: function () {\n    return useSearchParams;\n  },\n  useSelectedLayoutSegment: function () {\n    return useSelectedLayoutSegment;\n  },\n  useSelectedLayoutSegments: function () {\n    return useSelectedLayoutSegments;\n  },\n  useServerInsertedHTML: function () {\n    return _serverinsertedhtmlsharedruntime.useServerInsertedHTML;\n  }\n});\nconst _react = require(\"react\");\nconst _approutercontextsharedruntime = require(\"../../shared/lib/app-router-context.shared-runtime\");\nconst _hooksclientcontextsharedruntime = require(\"../../shared/lib/hooks-client-context.shared-runtime\");\nconst _getsegmentvalue = require(\"./router-reducer/reducers/get-segment-value\");\nconst _segment = require(\"../../shared/lib/segment\");\nconst _navigationreactserver = require(\"./navigation.react-server\");\nconst _serverinsertedhtmlsharedruntime = require(\"../../shared/lib/server-inserted-html.shared-runtime\");\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you *read* the current URL's search parameters.\n *\n * Learn more about [`URLSearchParams` on MDN](https://developer.mozilla.org/docs/Web/API/URLSearchParams)\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useSearchParams } from 'next/navigation'\n *\n * export default function Page() {\n *   const searchParams = useSearchParams()\n *   searchParams.get('foo') // returns 'bar' when ?foo=bar\n *   // ...\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSearchParams`](https://nextjs.org/docs/app/api-reference/functions/use-search-params)\n */\nfunction useSearchParams() {\n  const searchParams = (0, _react.useContext)(_hooksclientcontextsharedruntime.SearchParamsContext);\n  // In the case where this is `null`, the compat types added in\n  // `next-env.d.ts` will add a new overload that changes the return type to\n  // include `null`.\n  const readonlySearchParams = (0, _react.useMemo)(() => {\n    if (!searchParams) {\n      // When the router is not ready in pages, we won't have the search params\n      // available.\n      return null;\n    }\n    return new _navigationreactserver.ReadonlyURLSearchParams(searchParams);\n  }, [searchParams]);\n  if (typeof window === \"undefined\") {\n    // AsyncLocalStorage should not be included in the client bundle.\n    const {\n      bailoutToClientRendering\n    } = require(\"./bailout-to-client-rendering\");\n    // TODO-APP: handle dynamic = 'force-static' here and on the client\n    bailoutToClientRendering(\"useSearchParams()\");\n  }\n  return readonlySearchParams;\n}\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the current URL's pathname.\n *\n * @example\n * ```ts\n * \"use client\"\n * import { usePathname } from 'next/navigation'\n *\n * export default function Page() {\n *  const pathname = usePathname() // returns \"/dashboard\" on /dashboard?foo=bar\n *  // ...\n * }\n * ```\n *\n * Read more: [Next.js Docs: `usePathname`](https://nextjs.org/docs/app/api-reference/functions/use-pathname)\n */\nfunction usePathname() {\n  // In the case where this is `null`, the compat types added in `next-env.d.ts`\n  // will add a new overload that changes the return type to include `null`.\n  return (0, _react.useContext)(_hooksclientcontextsharedruntime.PathnameContext);\n}\n/**\n *\n * This hook allows you to programmatically change routes inside [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components).\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useRouter } from 'next/navigation'\n *\n * export default function Page() {\n *  const router = useRouter()\n *  // ...\n *  router.push('/dashboard') // Navigate to /dashboard\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useRouter`](https://nextjs.org/docs/app/api-reference/functions/use-router)\n */\nfunction useRouter() {\n  const router = (0, _react.useContext)(_approutercontextsharedruntime.AppRouterContext);\n  if (router === null) {\n    throw new Error(\"invariant expected app router to be mounted\");\n  }\n  return router;\n}\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read a route's dynamic params filled in by the current URL.\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useParams } from 'next/navigation'\n *\n * export default function Page() {\n *   // on /dashboard/[team] where pathname is /dashboard/nextjs\n *   const { team } = useParams() // team === \"nextjs\"\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useParams`](https://nextjs.org/docs/app/api-reference/functions/use-params)\n */\nfunction useParams() {\n  return (0, _react.useContext)(_hooksclientcontextsharedruntime.PathParamsContext);\n}\n/** Get the canonical parameters from the current level to the leaf node. */\nfunction getSelectedLayoutSegmentPath(tree, parallelRouteKey, first, segmentPath) {\n  if (first === void 0) first = true;\n  if (segmentPath === void 0) segmentPath = [];\n  let node;\n  if (first) {\n    // Use the provided parallel route key on the first parallel route\n    node = tree[1][parallelRouteKey];\n  } else {\n    // After first parallel route prefer children, if there's no children pick the first parallel route.\n    const parallelRoutes = tree[1];\n    var _parallelRoutes_children;\n    node = (_parallelRoutes_children = parallelRoutes.children) != null ? _parallelRoutes_children : Object.values(parallelRoutes)[0];\n  }\n  if (!node) return segmentPath;\n  const segment = node[0];\n  const segmentValue = (0, _getsegmentvalue.getSegmentValue)(segment);\n  if (!segmentValue || segmentValue.startsWith(_segment.PAGE_SEGMENT_KEY)) {\n    return segmentPath;\n  }\n  segmentPath.push(segmentValue);\n  return getSelectedLayoutSegmentPath(node, parallelRouteKey, false, segmentPath);\n}\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the active route segments **below** the Layout it is called from.\n *\n * @example\n * ```ts\n * 'use client'\n *\n * import { useSelectedLayoutSegments } from 'next/navigation'\n *\n * export default function ExampleClientComponent() {\n *   const segments = useSelectedLayoutSegments()\n *\n *   return (\n *     <ul>\n *       {segments.map((segment, index) => (\n *         <li key={index}>{segment}</li>\n *       ))}\n *     </ul>\n *   )\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSelectedLayoutSegments`](https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segments)\n */\nfunction useSelectedLayoutSegments(parallelRouteKey) {\n  if (parallelRouteKey === void 0) parallelRouteKey = \"children\";\n  const context = (0, _react.useContext)(_approutercontextsharedruntime.LayoutRouterContext);\n  // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts\n  if (!context) return null;\n  return getSelectedLayoutSegmentPath(context.tree, parallelRouteKey);\n}\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the active route segment **one level below** the Layout it is called from.\n *\n * @example\n * ```ts\n * 'use client'\n * import { useSelectedLayoutSegment } from 'next/navigation'\n *\n * export default function ExampleClientComponent() {\n *   const segment = useSelectedLayoutSegment()\n *\n *   return <p>Active segment: {segment}</p>\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSelectedLayoutSegment`](https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segment)\n */\nfunction useSelectedLayoutSegment(parallelRouteKey) {\n  if (parallelRouteKey === void 0) parallelRouteKey = \"children\";\n  const selectedLayoutSegments = useSelectedLayoutSegments(parallelRouteKey);\n  if (!selectedLayoutSegments || selectedLayoutSegments.length === 0) {\n    return null;\n  }\n  const selectedLayoutSegment = parallelRouteKey === \"children\" ? selectedLayoutSegments[0] : selectedLayoutSegments[selectedLayoutSegments.length - 1];\n  // if the default slot is showing, we return null since it's not technically \"selected\" (it's a fallback)\n  // and returning an internal value like `__DEFAULT__` would be confusing.\n  return selectedLayoutSegment === _segment.DEFAULT_SEGMENT_KEY ? null : selectedLayoutSegment;\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=navigation.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}