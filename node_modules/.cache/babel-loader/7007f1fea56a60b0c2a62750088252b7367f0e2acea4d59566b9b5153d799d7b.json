{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, findGridElement, findLeftPinnedCellsAfterCol, findRightPinnedCellsBeforeCol, getFieldFromHeaderElem, findHeaderElementFromField, getFieldsFromGroupHeaderElem, findGroupHeaderElementsFromField, findGridHeader, findGridCells, findParentElementFromClassName, findLeftPinnedHeadersAfterCol, findRightPinnedHeadersBeforeCol } from '../../../utils/domUtils';\nimport { DEFAULT_GRID_AUTOSIZE_OPTIONS } from './gridColumnResizeApi';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiEventHandler, useGridApiMethod, useGridApiOptionHandler, useGridLogger, useGridNativeEventListener, useGridSelector, useOnMount } from '../../utils';\nimport { gridVirtualizationColumnEnabledSelector } from '../virtualization';\nimport { createControllablePromise } from '../../../utils/createControllablePromise';\nimport { clamp } from '../../../utils/utils';\nimport { useTimeout } from '../../utils/useTimeout';\nimport { GridPinnedColumnPosition } from '../columns/gridColumnsInterfaces';\nimport { gridColumnsStateSelector } from '../columns';\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(separator, direction) {\n  const side = separator.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef();\n  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);\n  const value = useGridSelector(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = createControllablePromise();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (for example zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = findGridCells(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      return cell.getBoundingClientRect().width ?? 0;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = findGridHeader(apiRef.current, column.field);\n      if (header) {\n        const title = header.querySelector(`.${gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n        const iconContainer = header.querySelector(`.${gridClasses.iconButtonContainer}`);\n        const menuContainer = header.querySelector(`.${gridClasses.menuIcon}`);\n        const element = title ?? content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = contentWidth + paddingWidth + (iconContainer?.clientWidth ?? 0) + (menuContainer?.clientWidth ?? 0);\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = clamp(maxContent, min, max);\n  });\n  root.classList.remove(gridClasses.autosizing);\n  return widthByField;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\nfunction createResizeRefs() {\n  return {\n    colDef: undefined,\n    initialColWidth: 0,\n    initialTotalWidth: 0,\n    previousMouseClickEvent: undefined,\n    columnHeaderElement: undefined,\n    headerFilterElement: undefined,\n    groupHeaderElements: [],\n    cellElements: [],\n    leftPinnedCellsAfter: [],\n    rightPinnedCellsBefore: [],\n    fillerLeft: undefined,\n    fillerRight: undefined,\n    leftPinnedHeadersAfter: [],\n    rightPinnedHeadersBefore: []\n  };\n}\n\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const refs = useLazyRef(createResizeRefs).current;\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = useTimeout();\n  const touchId = React.useRef();\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);\n    const prevWidth = refs.columnHeaderElement.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    const columnWidthDiff = newWidth - refs.initialColWidth;\n    const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;\n    apiRef.current.rootElementRef?.current?.style.setProperty('--DataGrid-rowWidth', `${newTotalWidth}px`);\n    refs.colDef.computedWidth = newWidth;\n    refs.colDef.width = newWidth;\n    refs.colDef.flex = 0;\n    refs.columnHeaderElement.style.width = `${newWidth}px`;\n    refs.columnHeaderElement.style.minWidth = `${newWidth}px`;\n    refs.columnHeaderElement.style.maxWidth = `${newWidth}px`;\n    const headerFilterElement = refs.headerFilterElement;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n      headerFilterElement.style.minWidth = `${newWidth}px`;\n      headerFilterElement.style.maxWidth = `${newWidth}px`;\n    }\n    refs.groupHeaderElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n    refs.cellElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.setProperty('--width', finalWidth);\n    });\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {\n      updateProperty(refs.fillerLeft, 'width', widthDiff);\n      refs.leftPinnedCellsAfter.forEach(cell => {\n        updateProperty(cell, 'left', widthDiff);\n      });\n      refs.leftPinnedHeadersAfter.forEach(header => {\n        updateProperty(header, 'left', widthDiff);\n      });\n    }\n    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {\n      updateProperty(refs.fillerRight, 'width', widthDiff);\n      refs.rightPinnedCellsBefore.forEach(cell => {\n        updateProperty(cell, 'right', widthDiff);\n      });\n      refs.rightPinnedHeadersBefore.forEach(header => {\n        updateProperty(header, 'right', widthDiff);\n      });\n    }\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n\n    // Prevent double-clicks from being interpreted as two separate clicks\n    if (refs.previousMouseClickEvent) {\n      const prevEvent = refs.previousMouseClickEvent;\n      const prevTimeStamp = prevEvent.timeStamp;\n      const prevClientX = prevEvent.clientX;\n      const prevClientY = prevEvent.clientY;\n\n      // Check if the current event is part of a double-click\n      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {\n        refs.previousMouseClickEvent = undefined;\n        return;\n      }\n    }\n    if (refs.colDef) {\n      apiRef.current.setColumnWidth(refs.colDef.field, refs.colDef.width);\n      logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`);\n\n      // Since during resizing we update the columns width outside of React, React is unable to\n      // reapply the right style properties. We need to sync the state manually.\n      // So we reapply the same logic as in https://github.com/mui/mui-x/blob/0511bf65543ca05d2602a5a3e0a6156f2fc8e759/packages/x-data-grid/src/hooks/features/columnHeaders/useGridColumnHeaders.tsx#L405\n      const columnsState = gridColumnsStateSelector(apiRef.current.state);\n      refs.groupHeaderElements.forEach(element => {\n        const fields = getFieldsFromGroupHeaderElem(element);\n        const div = element;\n        const newWidth = fields.reduce((acc, field) => {\n          if (columnsState.columnVisibilityModel[field] !== false) {\n            return acc + columnsState.lookup[field].computedWidth;\n          }\n          return acc;\n        }, 0);\n        const finalWidth = `${newWidth}px`;\n        div.style.width = finalWidth;\n        div.style.minWidth = finalWidth;\n        div.style.maxWidth = finalWidth;\n      });\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const storeReferences = (colDef, separator, xStart) => {\n    const root = apiRef.current.rootElementRef.current;\n    refs.initialColWidth = colDef.computedWidth;\n    refs.initialTotalWidth = apiRef.current.getRootDimensions().rowWidth;\n    refs.colDef = colDef;\n    refs.columnHeaderElement = findHeaderElementFromField(apiRef.current.columnHeadersContainerRef.current, colDef.field);\n    const headerFilterElement = root.querySelector(`.${gridClasses.headerFilterRow} [data-field=\"${colDef.field}\"]`);\n    if (headerFilterElement) {\n      refs.headerFilterElement = headerFilterElement;\n    }\n    refs.groupHeaderElements = findGroupHeaderElementsFromField(apiRef.current.columnHeadersContainerRef?.current, colDef.field);\n    refs.cellElements = findGridCellElementsFromCol(refs.columnHeaderElement, apiRef.current);\n    refs.fillerLeft = findGridElement(apiRef.current, 'filler--pinnedLeft');\n    refs.fillerRight = findGridElement(apiRef.current, 'filler--pinnedRight');\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    refs.leftPinnedCellsAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedCellsAfterCol(apiRef.current, refs.columnHeaderElement);\n    refs.rightPinnedCellsBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedCellsBeforeCol(apiRef.current, refs.columnHeaderElement);\n    refs.leftPinnedHeadersAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedHeadersAfterCol(apiRef.current, refs.columnHeaderElement);\n    refs.rightPinnedHeadersBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedHeadersBeforeCol(apiRef.current, refs.columnHeaderElement);\n    resizeDirection.current = getResizeDirection(separator, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const columnHeaderElement = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(columnHeaderElement);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    storeReferences(colDef, cellSeparator, touch.clientX);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (refs.columnHeaderElement) {\n      refs.columnHeaderElement.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, refs, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    storeReferences(colDef, event.currentTarget, event.clientX);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    refs.previousMouseClickEvent = event.nativeEvent;\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = useEventCallback((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    const root = apiRef.current.rootElementRef?.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = gridColumnsStateSelector(apiRef.current.state);\n    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: userOptions?.columns ?? state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      apiRef.current.unstable_setColumnVirtualization(false);\n      await columnVirtualizationDisabled();\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => _extends({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field]\n      }));\n      if (options.expand) {\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);\n        const availableWidth = apiRef.current.getRootDimensions().viewportInnerSize.width;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n      newColumns.forEach((newColumn, index) => {\n        if (newColumn.width !== columns[index].width) {\n          const width = newColumn.width;\n          apiRef.current.publishEvent('columnWidthChange', {\n            element: apiRef.current.getColumnHeaderElement(newColumn.field),\n            colDef: newColumn,\n            width\n          });\n        }\n      });\n    } finally {\n      apiRef.current.unstable_setColumnVirtualization(true);\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  useOnMount(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  useGridNativeEventListener(apiRef, () => apiRef.current.columnHeadersContainerRef?.current, 'touchstart', handleTouchStart, {\n    passive: true\n  });\n  useGridApiMethod(apiRef, {\n    autosizeColumns\n  }, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};\nfunction updateProperty(element, property, delta) {\n  if (!element) {\n    return;\n  }\n  element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;\n}","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useEventCallback","useEventCallback","useLazyRef","useTheme","findGridCellElementsFromCol","findGridElement","findLeftPinnedCellsAfterCol","findRightPinnedCellsBeforeCol","getFieldFromHeaderElem","findHeaderElementFromField","getFieldsFromGroupHeaderElem","findGroupHeaderElementsFromField","findGridHeader","findGridCells","findParentElementFromClassName","findLeftPinnedHeadersAfterCol","findRightPinnedHeadersBeforeCol","DEFAULT_GRID_AUTOSIZE_OPTIONS","gridClasses","useGridApiEventHandler","useGridApiMethod","useGridApiOptionHandler","useGridLogger","useGridNativeEventListener","useGridSelector","useOnMount","gridVirtualizationColumnEnabledSelector","createControllablePromise","clamp","useTimeout","GridPinnedColumnPosition","gridColumnsStateSelector","trackFinger","event","currentTouchId","undefined","changedTouches","i","length","touch","identifier","x","clientX","y","clientY","computeNewWidth","initialOffsetToSeparator","clickX","columnBounds","resizeDirection","newWidth","left","right","computeOffsetToSeparator","flipResizeDirection","side","getResizeDirection","separator","direction","classList","contains","preventClick","preventDefault","stopImmediatePropagation","useColumnVirtualizationDisabled","apiRef","promise","useRef","selector","value","useEffect","current","resolve","asyncCheck","Promise","excludeOutliers","inputValues","factor","values","slice","sort","a","b","q1","Math","floor","q3","iqr","deviation","filter","v","extractColumnWidths","options","columns","widthByField","root","rootElementRef","add","autosizing","forEach","column","cells","field","widths","map","cell","getBoundingClientRect","width","filteredWidths","includeOutliers","outliersFactor","includeHeaders","header","title","querySelector","columnHeaderTitle","content","columnHeaderTitleContainerContent","iconContainer","iconButtonContainer","menuContainer","menuIcon","element","style","window","getComputedStyle","paddingWidth","parseInt","paddingLeft","paddingRight","contentWidth","scrollWidth","clientWidth","push","hasColumnMin","minWidth","Infinity","hasColumnMax","maxWidth","min","max","maxContent","remove","columnResizeStateInitializer","state","columnResize","resizingColumnField","createResizeRefs","colDef","initialColWidth","initialTotalWidth","previousMouseClickEvent","columnHeaderElement","headerFilterElement","groupHeaderElements","cellElements","leftPinnedCellsAfter","rightPinnedCellsBefore","fillerLeft","fillerRight","leftPinnedHeadersAfter","rightPinnedHeadersBefore","useGridColumnResize","props","theme","logger","refs","stopResizeEventTimeout","touchId","updateWidth","debug","prevWidth","offsetWidth","widthDiff","columnWidthDiff","newTotalWidth","setProperty","computedWidth","flex","div","finalWidth","getAttribute","pinnedPosition","unstable_applyPipeProcessors","LEFT","updateProperty","RIGHT","finishResize","nativeEvent","stopListening","prevEvent","prevTimeStamp","timeStamp","prevClientX","prevClientY","setColumnWidth","columnsState","fields","reduce","acc","columnVisibilityModel","lookup","start","publishEvent","storeReferences","xStart","getRootDimensions","rowWidth","columnHeadersContainerRef","headerFilterRow","handleResizeMouseUp","handleResizeMouseMove","buttons","params","handleTouchEnd","finger","handleTouchMove","type","handleTouchStart","cellSeparator","target","columnHeader","getColumn","doc","currentTarget","addEventListener","useCallback","body","removeProperty","removeEventListener","setTimeout","pointerEvents","handleResizeStart","setState","forceUpdate","handleResizeStop","handleColumnResizeMouseDown","button","cursor","handleColumnSeparatorDoubleClick","disableAutosize","resizable","autosizeColumns","autosizeOptions","columnVirtualizationDisabled","isAutosizingRef","userOptions","orderedFields","c","unstable_setColumnVirtualization","newColumns","expand","visibleColumns","totalWidth","total","availableWidth","viewportInnerSize","remainingWidth","widthPerColumn","updateColumns","newColumn","index","getColumnHeaderElement","autosizeOnMount","then","passive","onColumnResize","onColumnWidthChange","property","delta"],"sources":["/Users/khangdo/node_modules/@mui/x-data-grid/hooks/features/columnResize/useGridColumnResize.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, findGridElement, findLeftPinnedCellsAfterCol, findRightPinnedCellsBeforeCol, getFieldFromHeaderElem, findHeaderElementFromField, getFieldsFromGroupHeaderElem, findGroupHeaderElementsFromField, findGridHeader, findGridCells, findParentElementFromClassName, findLeftPinnedHeadersAfterCol, findRightPinnedHeadersBeforeCol } from '../../../utils/domUtils';\nimport { DEFAULT_GRID_AUTOSIZE_OPTIONS } from './gridColumnResizeApi';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiEventHandler, useGridApiMethod, useGridApiOptionHandler, useGridLogger, useGridNativeEventListener, useGridSelector, useOnMount } from '../../utils';\nimport { gridVirtualizationColumnEnabledSelector } from '../virtualization';\nimport { createControllablePromise } from '../../../utils/createControllablePromise';\nimport { clamp } from '../../../utils/utils';\nimport { useTimeout } from '../../utils/useTimeout';\nimport { GridPinnedColumnPosition } from '../columns/gridColumnsInterfaces';\nimport { gridColumnsStateSelector } from '../columns';\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(separator, direction) {\n  const side = separator.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef();\n  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);\n  const value = useGridSelector(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = createControllablePromise();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (for example zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = findGridCells(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      return cell.getBoundingClientRect().width ?? 0;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = findGridHeader(apiRef.current, column.field);\n      if (header) {\n        const title = header.querySelector(`.${gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n        const iconContainer = header.querySelector(`.${gridClasses.iconButtonContainer}`);\n        const menuContainer = header.querySelector(`.${gridClasses.menuIcon}`);\n        const element = title ?? content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = contentWidth + paddingWidth + (iconContainer?.clientWidth ?? 0) + (menuContainer?.clientWidth ?? 0);\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = clamp(maxContent, min, max);\n  });\n  root.classList.remove(gridClasses.autosizing);\n  return widthByField;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\nfunction createResizeRefs() {\n  return {\n    colDef: undefined,\n    initialColWidth: 0,\n    initialTotalWidth: 0,\n    previousMouseClickEvent: undefined,\n    columnHeaderElement: undefined,\n    headerFilterElement: undefined,\n    groupHeaderElements: [],\n    cellElements: [],\n    leftPinnedCellsAfter: [],\n    rightPinnedCellsBefore: [],\n    fillerLeft: undefined,\n    fillerRight: undefined,\n    leftPinnedHeadersAfter: [],\n    rightPinnedHeadersBefore: []\n  };\n}\n\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const theme = useTheme();\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const refs = useLazyRef(createResizeRefs).current;\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = useTimeout();\n  const touchId = React.useRef();\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);\n    const prevWidth = refs.columnHeaderElement.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    const columnWidthDiff = newWidth - refs.initialColWidth;\n    const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;\n    apiRef.current.rootElementRef?.current?.style.setProperty('--DataGrid-rowWidth', `${newTotalWidth}px`);\n    refs.colDef.computedWidth = newWidth;\n    refs.colDef.width = newWidth;\n    refs.colDef.flex = 0;\n    refs.columnHeaderElement.style.width = `${newWidth}px`;\n    refs.columnHeaderElement.style.minWidth = `${newWidth}px`;\n    refs.columnHeaderElement.style.maxWidth = `${newWidth}px`;\n    const headerFilterElement = refs.headerFilterElement;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n      headerFilterElement.style.minWidth = `${newWidth}px`;\n      headerFilterElement.style.maxWidth = `${newWidth}px`;\n    }\n    refs.groupHeaderElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n    refs.cellElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.setProperty('--width', finalWidth);\n    });\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {\n      updateProperty(refs.fillerLeft, 'width', widthDiff);\n      refs.leftPinnedCellsAfter.forEach(cell => {\n        updateProperty(cell, 'left', widthDiff);\n      });\n      refs.leftPinnedHeadersAfter.forEach(header => {\n        updateProperty(header, 'left', widthDiff);\n      });\n    }\n    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {\n      updateProperty(refs.fillerRight, 'width', widthDiff);\n      refs.rightPinnedCellsBefore.forEach(cell => {\n        updateProperty(cell, 'right', widthDiff);\n      });\n      refs.rightPinnedHeadersBefore.forEach(header => {\n        updateProperty(header, 'right', widthDiff);\n      });\n    }\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n\n    // Prevent double-clicks from being interpreted as two separate clicks\n    if (refs.previousMouseClickEvent) {\n      const prevEvent = refs.previousMouseClickEvent;\n      const prevTimeStamp = prevEvent.timeStamp;\n      const prevClientX = prevEvent.clientX;\n      const prevClientY = prevEvent.clientY;\n\n      // Check if the current event is part of a double-click\n      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {\n        refs.previousMouseClickEvent = undefined;\n        return;\n      }\n    }\n    if (refs.colDef) {\n      apiRef.current.setColumnWidth(refs.colDef.field, refs.colDef.width);\n      logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`);\n\n      // Since during resizing we update the columns width outside of React, React is unable to\n      // reapply the right style properties. We need to sync the state manually.\n      // So we reapply the same logic as in https://github.com/mui/mui-x/blob/0511bf65543ca05d2602a5a3e0a6156f2fc8e759/packages/x-data-grid/src/hooks/features/columnHeaders/useGridColumnHeaders.tsx#L405\n      const columnsState = gridColumnsStateSelector(apiRef.current.state);\n      refs.groupHeaderElements.forEach(element => {\n        const fields = getFieldsFromGroupHeaderElem(element);\n        const div = element;\n        const newWidth = fields.reduce((acc, field) => {\n          if (columnsState.columnVisibilityModel[field] !== false) {\n            return acc + columnsState.lookup[field].computedWidth;\n          }\n          return acc;\n        }, 0);\n        const finalWidth = `${newWidth}px`;\n        div.style.width = finalWidth;\n        div.style.minWidth = finalWidth;\n        div.style.maxWidth = finalWidth;\n      });\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const storeReferences = (colDef, separator, xStart) => {\n    const root = apiRef.current.rootElementRef.current;\n    refs.initialColWidth = colDef.computedWidth;\n    refs.initialTotalWidth = apiRef.current.getRootDimensions().rowWidth;\n    refs.colDef = colDef;\n    refs.columnHeaderElement = findHeaderElementFromField(apiRef.current.columnHeadersContainerRef.current, colDef.field);\n    const headerFilterElement = root.querySelector(`.${gridClasses.headerFilterRow} [data-field=\"${colDef.field}\"]`);\n    if (headerFilterElement) {\n      refs.headerFilterElement = headerFilterElement;\n    }\n    refs.groupHeaderElements = findGroupHeaderElementsFromField(apiRef.current.columnHeadersContainerRef?.current, colDef.field);\n    refs.cellElements = findGridCellElementsFromCol(refs.columnHeaderElement, apiRef.current);\n    refs.fillerLeft = findGridElement(apiRef.current, 'filler--pinnedLeft');\n    refs.fillerRight = findGridElement(apiRef.current, 'filler--pinnedRight');\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    refs.leftPinnedCellsAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedCellsAfterCol(apiRef.current, refs.columnHeaderElement);\n    refs.rightPinnedCellsBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedCellsBeforeCol(apiRef.current, refs.columnHeaderElement);\n    refs.leftPinnedHeadersAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedHeadersAfterCol(apiRef.current, refs.columnHeaderElement);\n    refs.rightPinnedHeadersBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedHeadersBeforeCol(apiRef.current, refs.columnHeaderElement);\n    resizeDirection.current = getResizeDirection(separator, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const columnHeaderElement = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(columnHeaderElement);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    storeReferences(colDef, cellSeparator, touch.clientX);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (refs.columnHeaderElement) {\n      refs.columnHeaderElement.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, refs, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    storeReferences(colDef, event.currentTarget, event.clientX);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    refs.previousMouseClickEvent = event.nativeEvent;\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = useEventCallback((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    const root = apiRef.current.rootElementRef?.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = gridColumnsStateSelector(apiRef.current.state);\n    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: userOptions?.columns ?? state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      apiRef.current.unstable_setColumnVirtualization(false);\n      await columnVirtualizationDisabled();\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => _extends({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field]\n      }));\n      if (options.expand) {\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);\n        const availableWidth = apiRef.current.getRootDimensions().viewportInnerSize.width;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n      newColumns.forEach((newColumn, index) => {\n        if (newColumn.width !== columns[index].width) {\n          const width = newColumn.width;\n          apiRef.current.publishEvent('columnWidthChange', {\n            element: apiRef.current.getColumnHeaderElement(newColumn.field),\n            colDef: newColumn,\n            width\n          });\n        }\n      });\n    } finally {\n      apiRef.current.unstable_setColumnVirtualization(true);\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  useOnMount(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  useGridNativeEventListener(apiRef, () => apiRef.current.columnHeadersContainerRef?.current, 'touchstart', handleTouchStart, {\n    passive: true\n  });\n  useGridApiMethod(apiRef, {\n    autosizeColumns\n  }, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};\nfunction updateProperty(element, property, delta) {\n  if (!element) {\n    return;\n  }\n  element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}