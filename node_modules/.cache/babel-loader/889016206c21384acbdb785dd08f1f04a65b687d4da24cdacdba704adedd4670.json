{"ast":null,"code":"// src/infiniteQueryBehavior.ts\nimport { addToEnd, addToStart, ensureQueryFn } from \"./utils.js\";\nfunction infiniteQueryBehavior(pages) {\n  return {\n    onFetch: (context, query) => {\n      const fetchFn = async () => {\n        var _context$fetchOptions, _context$state$data, _context$state$data2;\n        const options = context.options;\n        const direction = (_context$fetchOptions = context.fetchOptions) === null || _context$fetchOptions === void 0 || (_context$fetchOptions = _context$fetchOptions.meta) === null || _context$fetchOptions === void 0 || (_context$fetchOptions = _context$fetchOptions.fetchMore) === null || _context$fetchOptions === void 0 ? void 0 : _context$fetchOptions.direction;\n        const oldPages = ((_context$state$data = context.state.data) === null || _context$state$data === void 0 ? void 0 : _context$state$data.pages) || [];\n        const oldPageParams = ((_context$state$data2 = context.state.data) === null || _context$state$data2 === void 0 ? void 0 : _context$state$data2.pageParams) || [];\n        const empty = {\n          pages: [],\n          pageParams: []\n        };\n        let cancelled = false;\n        const addSignalProperty = object => {\n          Object.defineProperty(object, \"signal\", {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true;\n              } else {\n                context.signal.addEventListener(\"abort\", () => {\n                  cancelled = true;\n                });\n              }\n              return context.signal;\n            }\n          });\n        };\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions);\n        const fetchPage = async (data, param, previous) => {\n          if (cancelled) {\n            return Promise.reject();\n          }\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data);\n          }\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? \"backward\" : \"forward\",\n            meta: context.options.meta\n          };\n          addSignalProperty(queryFnContext);\n          const page = await queryFn(queryFnContext);\n          const {\n            maxPages\n          } = context.options;\n          const addTo = previous ? addToStart : addToEnd;\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages)\n          };\n        };\n        let result;\n        if (direction && oldPages.length) {\n          const previous = direction === \"backward\";\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams\n          };\n          const param = pageParamFn(options, oldData);\n          result = await fetchPage(oldData, param, previous);\n        } else {\n          var _oldPageParams$;\n          result = await fetchPage(empty, (_oldPageParams$ = oldPageParams[0]) !== null && _oldPageParams$ !== void 0 ? _oldPageParams$ : options.initialPageParam);\n          const remainingPages = pages !== null && pages !== void 0 ? pages : oldPages.length;\n          for (let i = 1; i < remainingPages; i++) {\n            const param = getNextPageParam(options, result);\n            result = await fetchPage(result, param);\n          }\n        }\n        return result;\n      };\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          var _context$options$pers, _context$options;\n          return (_context$options$pers = (_context$options = context.options).persister) === null || _context$options$pers === void 0 ? void 0 : _context$options$pers.call(_context$options, fetchFn, {\n            queryKey: context.queryKey,\n            meta: context.options.meta,\n            signal: context.signal\n          }, query);\n        };\n      } else {\n        context.fetchFn = fetchFn;\n      }\n    }\n  };\n}\nfunction getNextPageParam(options, _ref) {\n  let {\n    pages,\n    pageParams\n  } = _ref;\n  const lastIndex = pages.length - 1;\n  return options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams);\n}\nfunction getPreviousPageParam(options, _ref2) {\n  var _options$getPreviousP;\n  let {\n    pages,\n    pageParams\n  } = _ref2;\n  return (_options$getPreviousP = options.getPreviousPageParam) === null || _options$getPreviousP === void 0 ? void 0 : _options$getPreviousP.call(options, pages[0], pages, pageParams[0], pageParams);\n}\nfunction hasNextPage(options, data) {\n  if (!data) return false;\n  return getNextPageParam(options, data) != null;\n}\nfunction hasPreviousPage(options, data) {\n  if (!data || !options.getPreviousPageParam) return false;\n  return getPreviousPageParam(options, data) != null;\n}\nexport { hasNextPage, hasPreviousPage, infiniteQueryBehavior };","map":{"version":3,"names":["addToEnd","addToStart","ensureQueryFn","infiniteQueryBehavior","pages","onFetch","context","query","fetchFn","_context$fetchOptions","_context$state$data","_context$state$data2","options","direction","fetchOptions","meta","fetchMore","oldPages","state","data","oldPageParams","pageParams","empty","cancelled","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","aborted","addEventListener","queryFn","fetchPage","param","previous","Promise","reject","length","resolve","queryFnContext","queryKey","pageParam","page","maxPages","addTo","result","pageParamFn","getPreviousPageParam","getNextPageParam","oldData","_oldPageParams$","initialPageParam","remainingPages","i","persister","_context$options$pers","_context$options","call","_ref","lastIndex","_ref2","_options$getPreviousP","hasNextPage","hasPreviousPage"],"sources":["/Users/khangdo/node_modules/@tanstack/query-core/src/infiniteQueryBehavior.ts"],"sourcesContent":["import { addToEnd, addToStart, ensureQueryFn } from './utils'\nimport type { QueryBehavior } from './query'\nimport type {\n  InfiniteData,\n  InfiniteQueryPageParamsOptions,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n} from './types'\n\nexport function infiniteQueryBehavior<TQueryFnData, TError, TData, TPageParam>(\n  pages?: number,\n): QueryBehavior<TQueryFnData, TError, InfiniteData<TData, TPageParam>> {\n  return {\n    onFetch: (context, query) => {\n      const fetchFn = async () => {\n        const options = context.options as InfiniteQueryPageParamsOptions<TData>\n        const direction = context.fetchOptions?.meta?.fetchMore?.direction\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        const empty = { pages: [], pageParams: [] }\n        let cancelled = false\n\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true\n              } else {\n                context.signal.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions)\n\n        // Create function to fetch a page\n        const fetchPage = async (\n          data: InfiniteData<unknown>,\n          param: unknown,\n          previous?: boolean,\n        ): Promise<InfiniteData<unknown>> => {\n          if (cancelled) {\n            return Promise.reject()\n          }\n\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data)\n          }\n\n          const queryFnContext: OmitKeyof<\n            QueryFunctionContext<QueryKey, unknown>,\n            'signal'\n          > = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? 'backward' : 'forward',\n            meta: context.options.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const page = await queryFn(\n            queryFnContext as QueryFunctionContext<QueryKey, unknown>,\n          )\n\n          const { maxPages } = context.options\n          const addTo = previous ? addToStart : addToEnd\n\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages),\n          }\n        }\n\n        let result: InfiniteData<unknown>\n\n        // fetch next / previous page?\n        if (direction && oldPages.length) {\n          const previous = direction === 'backward'\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams,\n          }\n          const param = pageParamFn(options, oldData)\n\n          result = await fetchPage(oldData, param, previous)\n        } else {\n          // Fetch first page\n          result = await fetchPage(\n            empty,\n            oldPageParams[0] ?? options.initialPageParam,\n          )\n\n          const remainingPages = pages ?? oldPages.length\n\n          // Fetch remaining pages\n          for (let i = 1; i < remainingPages; i++) {\n            const param = getNextPageParam(options, result)\n            result = await fetchPage(result, param)\n          }\n        }\n\n        return result\n      }\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn as any,\n            {\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal,\n            },\n            query,\n          )\n        }\n      } else {\n        context.fetchFn = fetchFn\n      }\n    },\n  }\n}\n\nfunction getNextPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  const lastIndex = pages.length - 1\n  return options.getNextPageParam(\n    pages[lastIndex],\n    pages,\n    pageParams[lastIndex],\n    pageParams,\n  )\n}\n\nfunction getPreviousPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  return options.getPreviousPageParam?.(\n    pages[0],\n    pages,\n    pageParams[0],\n    pageParams,\n  )\n}\n\n/**\n * Checks if there is a next page.\n */\nexport function hasNextPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data) return false\n  return getNextPageParam(options, data) != null\n}\n\n/**\n * Checks if there is a previous page.\n */\nexport function hasPreviousPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data || !options.getPreviousPageParam) return false\n  return getPreviousPageParam(options, data) != null\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}