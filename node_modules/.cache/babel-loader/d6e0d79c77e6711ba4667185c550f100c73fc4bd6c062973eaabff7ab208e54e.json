{"ast":null,"code":"// src/hydration.ts\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && {\n      scope: mutation.options.scope\n    }),\n    ...(mutation.meta && {\n      meta: mutation.meta\n    })\n  };\n}\nfunction dehydrateQuery(query) {\n  var _query$promise;\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === \"pending\" && {\n      promise: (_query$promise = query.promise) === null || _query$promise === void 0 ? void 0 : _query$promise.catch(error => {\n        if (process.env.NODE_ENV !== \"production\") {\n          console.error(\"A query that was dehydrated as pending ended up rejecting. [\".concat(query.queryHash, \"]: \").concat(error, \"; The error will be redacted in production builds\"));\n        }\n        return Promise.reject(new Error(\"redacted\"));\n      })\n    }),\n    ...(query.meta && {\n      meta: query.meta\n    })\n  };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\nfunction dehydrate(client) {\n  var _ref, _options$shouldDehydr, _client$getDefaultOpt, _ref2, _options$shouldDehydr2, _client$getDefaultOpt2;\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const filterMutation = (_ref = (_options$shouldDehydr = options.shouldDehydrateMutation) !== null && _options$shouldDehydr !== void 0 ? _options$shouldDehydr : (_client$getDefaultOpt = client.getDefaultOptions().dehydrate) === null || _client$getDefaultOpt === void 0 ? void 0 : _client$getDefaultOpt.shouldDehydrateMutation) !== null && _ref !== void 0 ? _ref : defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n  const filterQuery = (_ref2 = (_options$shouldDehydr2 = options.shouldDehydrateQuery) !== null && _options$shouldDehydr2 !== void 0 ? _options$shouldDehydr2 : (_client$getDefaultOpt2 = client.getDefaultOptions().dehydrate) === null || _client$getDefaultOpt2 === void 0 ? void 0 : _client$getDefaultOpt2.shouldDehydrateQuery) !== null && _ref2 !== void 0 ? _ref2 : defaultShouldDehydrateQuery;\n  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query)] : []);\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(_ref3 => {\n    var _client$getDefaultOpt3, _options$defaultOptio;\n    let {\n      state,\n      ...mutationOptions\n    } = _ref3;\n    mutationCache.build(client, {\n      ...((_client$getDefaultOpt3 = client.getDefaultOptions().hydrate) === null || _client$getDefaultOpt3 === void 0 ? void 0 : _client$getDefaultOpt3.mutations),\n      ...(options === null || options === void 0 || (_options$defaultOptio = options.defaultOptions) === null || _options$defaultOptio === void 0 ? void 0 : _options$defaultOptio.mutations),\n      ...mutationOptions\n    }, state);\n  });\n  queries.forEach(_ref4 => {\n    let {\n      queryKey,\n      state,\n      queryHash,\n      meta,\n      promise\n    } = _ref4;\n    let query = queryCache.get(queryHash);\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        const {\n          fetchStatus: _ignored,\n          ...dehydratedQueryState\n        } = state;\n        query.setState(dehydratedQueryState);\n      }\n    } else {\n      var _client$getDefaultOpt4, _options$defaultOptio2;\n      query = queryCache.build(client, {\n        ...((_client$getDefaultOpt4 = client.getDefaultOptions().hydrate) === null || _client$getDefaultOpt4 === void 0 ? void 0 : _client$getDefaultOpt4.queries),\n        ...(options === null || options === void 0 || (_options$defaultOptio2 = options.defaultOptions) === null || _options$defaultOptio2 === void 0 ? void 0 : _options$defaultOptio2.queries),\n        queryKey,\n        queryHash,\n        meta\n      },\n      // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      {\n        ...state,\n        fetchStatus: \"idle\"\n      });\n    }\n    if (promise) {\n      void query.fetch(void 0, {\n        initialPromise: promise\n      });\n    }\n  });\n}\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"names":["dehydrateMutation","mutation","mutationKey","options","state","scope","meta","dehydrateQuery","query","_query$promise","queryKey","queryHash","status","promise","catch","error","process","env","NODE_ENV","console","concat","Promise","reject","Error","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","dehydrate","client","_ref","_options$shouldDehydr","_client$getDefaultOpt","_ref2","_options$shouldDehydr2","_client$getDefaultOpt2","arguments","length","undefined","filterMutation","shouldDehydrateMutation","getDefaultOptions","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","forEach","_ref3","_client$getDefaultOpt3","_options$defaultOptio","mutationOptions","build","defaultOptions","_ref4","get","dataUpdatedAt","fetchStatus","_ignored","dehydratedQueryState","setState","_client$getDefaultOpt4","_options$defaultOptio2","fetch","initialPromise"],"sources":["/Users/khangdo/node_modules/@tanstack/query-core/src/hydration.ts"],"sourcesContent":["import type {\n  DefaultError,\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions<unknown, DefaultError, unknown, unknown>\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  promise?: Promise<unknown>\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === 'pending' && {\n      promise: query.promise?.catch((error) => {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`,\n          )\n        }\n        return Promise.reject(new Error('redacted'))\n      }),\n    }),\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ??\n    defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ??\n    defaultShouldDehydrateQuery\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) => (filterQuery(query) ? [dehydrateQuery(query)] : []))\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta, promise }) => {\n    let query = queryCache.get(queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...dehydratedQueryState } = state\n        query.setState(dehydratedQueryState)\n      }\n    } else {\n      // Restore query\n      query = queryCache.build(\n        client,\n        {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta,\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          fetchStatus: 'idle',\n        },\n      )\n    }\n\n    if (promise) {\n      // this doesn't actually fetch - it just creates a retryer\n      // which will re-use the passed `initialPromise`\n      void query.fetch(undefined, { initialPromise: promise })\n    }\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}