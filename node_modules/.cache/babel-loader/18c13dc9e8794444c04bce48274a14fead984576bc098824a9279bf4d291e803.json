{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  ReadonlyURLSearchParams: null,\n  useSearchParams: null,\n  usePathname: null,\n  ServerInsertedHTMLContext: null,\n  useServerInsertedHTML: null,\n  useRouter: null,\n  useParams: null,\n  useSelectedLayoutSegments: null,\n  useSelectedLayoutSegment: null,\n  redirect: null,\n  permanentRedirect: null,\n  RedirectType: null,\n  notFound: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  ReadonlyURLSearchParams: function () {\n    return ReadonlyURLSearchParams;\n  },\n  useSearchParams: function () {\n    return useSearchParams;\n  },\n  usePathname: function () {\n    return usePathname;\n  },\n  ServerInsertedHTMLContext: function () {\n    return _serverinsertedhtmlsharedruntime.ServerInsertedHTMLContext;\n  },\n  useServerInsertedHTML: function () {\n    return _serverinsertedhtmlsharedruntime.useServerInsertedHTML;\n  },\n  useRouter: function () {\n    return useRouter;\n  },\n  useParams: function () {\n    return useParams;\n  },\n  useSelectedLayoutSegments: function () {\n    return useSelectedLayoutSegments;\n  },\n  useSelectedLayoutSegment: function () {\n    return useSelectedLayoutSegment;\n  },\n  redirect: function () {\n    return _redirect.redirect;\n  },\n  permanentRedirect: function () {\n    return _redirect.permanentRedirect;\n  },\n  RedirectType: function () {\n    return _redirect.RedirectType;\n  },\n  notFound: function () {\n    return _notfound.notFound;\n  }\n});\nconst _react = require(\"react\");\nconst _approutercontextsharedruntime = require(\"../../shared/lib/app-router-context.shared-runtime\");\nconst _hooksclientcontextsharedruntime = require(\"../../shared/lib/hooks-client-context.shared-runtime\");\nconst _clienthookinservercomponenterror = require(\"./client-hook-in-server-component-error\");\nconst _getsegmentvalue = require(\"./router-reducer/reducers/get-segment-value\");\nconst _segment = require(\"../../shared/lib/segment\");\nconst _serverinsertedhtmlsharedruntime = require(\"../../shared/lib/server-inserted-html.shared-runtime\");\nconst _redirect = require(\"./redirect\");\nconst _notfound = require(\"./not-found\");\nconst INTERNAL_URLSEARCHPARAMS_INSTANCE = Symbol(\"internal for urlsearchparams readonly\");\nfunction readonlyURLSearchParamsError() {\n  return new Error(\"ReadonlyURLSearchParams cannot be modified\");\n}\nclass ReadonlyURLSearchParams {\n  [Symbol.iterator]() {\n    return this[INTERNAL_URLSEARCHPARAMS_INSTANCE][Symbol.iterator]();\n  }\n  append() {\n    throw readonlyURLSearchParamsError();\n  }\n  delete() {\n    throw readonlyURLSearchParamsError();\n  }\n  set() {\n    throw readonlyURLSearchParamsError();\n  }\n  sort() {\n    throw readonlyURLSearchParamsError();\n  }\n  constructor(urlSearchParams) {\n    this[INTERNAL_URLSEARCHPARAMS_INSTANCE] = urlSearchParams;\n    this.entries = urlSearchParams.entries.bind(urlSearchParams);\n    this.forEach = urlSearchParams.forEach.bind(urlSearchParams);\n    this.get = urlSearchParams.get.bind(urlSearchParams);\n    this.getAll = urlSearchParams.getAll.bind(urlSearchParams);\n    this.has = urlSearchParams.has.bind(urlSearchParams);\n    this.keys = urlSearchParams.keys.bind(urlSearchParams);\n    this.values = urlSearchParams.values.bind(urlSearchParams);\n    this.toString = urlSearchParams.toString.bind(urlSearchParams);\n    this.size = urlSearchParams.size;\n  }\n}\nfunction useSearchParams() {\n  (0, _clienthookinservercomponenterror.clientHookInServerComponentError)(\"useSearchParams\");\n  const searchParams = (0, _react.useContext)(_hooksclientcontextsharedruntime.SearchParamsContext);\n  // In the case where this is `null`, the compat types added in\n  // `next-env.d.ts` will add a new overload that changes the return type to\n  // include `null`.\n  const readonlySearchParams = (0, _react.useMemo)(() => {\n    if (!searchParams) {\n      // When the router is not ready in pages, we won't have the search params\n      // available.\n      return null;\n    }\n    return new ReadonlyURLSearchParams(searchParams);\n  }, [searchParams]);\n  if (typeof window === \"undefined\") {\n    // AsyncLocalStorage should not be included in the client bundle.\n    const {\n      bailoutToClientRendering\n    } = require(\"./bailout-to-client-rendering\");\n    // TODO-APP: handle dynamic = 'force-static' here and on the client\n    bailoutToClientRendering(\"useSearchParams()\");\n  }\n  return readonlySearchParams;\n}\nfunction usePathname() {\n  (0, _clienthookinservercomponenterror.clientHookInServerComponentError)(\"usePathname\");\n  // In the case where this is `null`, the compat types added in `next-env.d.ts`\n  // will add a new overload that changes the return type to include `null`.\n  return (0, _react.useContext)(_hooksclientcontextsharedruntime.PathnameContext);\n}\nfunction useRouter() {\n  (0, _clienthookinservercomponenterror.clientHookInServerComponentError)(\"useRouter\");\n  const router = (0, _react.useContext)(_approutercontextsharedruntime.AppRouterContext);\n  if (router === null) {\n    throw new Error(\"invariant expected app router to be mounted\");\n  }\n  return router;\n}\n// this function performs a depth-first search of the tree to find the selected\n// params\nfunction getSelectedParams(tree, params) {\n  if (params === void 0) params = {};\n  const parallelRoutes = tree[1];\n  for (const parallelRoute of Object.values(parallelRoutes)) {\n    const segment = parallelRoute[0];\n    const isDynamicParameter = Array.isArray(segment);\n    const segmentValue = isDynamicParameter ? segment[1] : segment;\n    if (!segmentValue || segmentValue.startsWith(_segment.PAGE_SEGMENT_KEY)) continue;\n    // Ensure catchAll and optional catchall are turned into an array\n    const isCatchAll = isDynamicParameter && (segment[2] === \"c\" || segment[2] === \"oc\");\n    if (isCatchAll) {\n      params[segment[0]] = segment[1].split(\"/\");\n    } else if (isDynamicParameter) {\n      params[segment[0]] = segment[1];\n    }\n    params = getSelectedParams(parallelRoute, params);\n  }\n  return params;\n}\nfunction useParams() {\n  (0, _clienthookinservercomponenterror.clientHookInServerComponentError)(\"useParams\");\n  const globalLayoutRouter = (0, _react.useContext)(_approutercontextsharedruntime.GlobalLayoutRouterContext);\n  const pathParams = (0, _react.useContext)(_hooksclientcontextsharedruntime.PathParamsContext);\n  return (0, _react.useMemo)(() => {\n    // When it's under app router\n    if (globalLayoutRouter == null ? void 0 : globalLayoutRouter.tree) {\n      return getSelectedParams(globalLayoutRouter.tree);\n    }\n    // When it's under client side pages router\n    return pathParams;\n  }, [globalLayoutRouter == null ? void 0 : globalLayoutRouter.tree, pathParams]);\n}\n// TODO-APP: handle parallel routes\n/**\n * Get the canonical parameters from the current level to the leaf node.\n */\nfunction getSelectedLayoutSegmentPath(tree, parallelRouteKey, first, segmentPath) {\n  if (first === void 0) first = true;\n  if (segmentPath === void 0) segmentPath = [];\n  let node;\n  if (first) {\n    // Use the provided parallel route key on the first parallel route\n    node = tree[1][parallelRouteKey];\n  } else {\n    // After first parallel route prefer children, if there's no children pick the first parallel route.\n    const parallelRoutes = tree[1];\n    var _parallelRoutes_children;\n    node = (_parallelRoutes_children = parallelRoutes.children) != null ? _parallelRoutes_children : Object.values(parallelRoutes)[0];\n  }\n  if (!node) return segmentPath;\n  const segment = node[0];\n  const segmentValue = (0, _getsegmentvalue.getSegmentValue)(segment);\n  if (!segmentValue || segmentValue.startsWith(_segment.PAGE_SEGMENT_KEY)) {\n    return segmentPath;\n  }\n  segmentPath.push(segmentValue);\n  return getSelectedLayoutSegmentPath(node, parallelRouteKey, false, segmentPath);\n}\nfunction useSelectedLayoutSegments(parallelRouteKey) {\n  if (parallelRouteKey === void 0) parallelRouteKey = \"children\";\n  (0, _clienthookinservercomponenterror.clientHookInServerComponentError)(\"useSelectedLayoutSegments\");\n  const {\n    tree\n  } = (0, _react.useContext)(_approutercontextsharedruntime.LayoutRouterContext);\n  return getSelectedLayoutSegmentPath(tree, parallelRouteKey);\n}\nfunction useSelectedLayoutSegment(parallelRouteKey) {\n  if (parallelRouteKey === void 0) parallelRouteKey = \"children\";\n  (0, _clienthookinservercomponenterror.clientHookInServerComponentError)(\"useSelectedLayoutSegment\");\n  const selectedLayoutSegments = useSelectedLayoutSegments(parallelRouteKey);\n  if (selectedLayoutSegments.length === 0) {\n    return null;\n  }\n  return selectedLayoutSegments[0];\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=navigation.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}